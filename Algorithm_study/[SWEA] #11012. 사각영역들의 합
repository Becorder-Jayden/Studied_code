#### 문제💎

### 11012. 03_배열2_사각영역들의 합

N x N 배열과 M 개의 정사각 영역에 대한 정보가 주어 질 때 M 개의 사각영역에 포함된 값들의 총합을 계산해보자.  

사각영역의 정보는 좌상단 좌표와 변의 길이로 표현한다.ㅁ  

N X N 영역이 왼쪽 그림과 같고, 다음 2개의 정사각 영역 정보가 주어지면 총합은 26 이 된다.  

- (1행, 2열) | 변의 길이 = 2  

- (2행, 3열) | 변의 길이 = 3  

좌상단 좌표의 값은 항상 0 에서 N-1 사이의 값이다. 그러나, 두 번째 정사각 영역과 같이 N X N 영역을 벗어날 수 도 있다.  

![](https://blog.kakaocdn.net/dn/41HHz/btrIOvCnoHr/qOzG8ucE6cReiQKv9SiuH1/img.png)

[입력조건]  

첫 줄에 테스트케이스 수가 주어진다.  

다음으로 배열의 크기 N(1<= N <= 30)과 정사각 영역의 수 M(<= 10) 이 주어진다.  

다음 N개의 줄에 공백으로 구분된 N개의 정수 값이 주어진다.  

다음 M개의 줄에 정사각 영역의 좌상단 위치와 변의 길이가 주어진다. 변의 길이는 1이상 10이하의 값이다.  

[출력조건]  

#〉 과 케이스 번호를 출력하고 정사각 영역들의 총합을 출력한다.

#### 입력

#### 3

4 1  
0 2 1 3  
1 0 0 1  
2 0 2 0  
3 2 2 2  
1 0 2  
4 2  
3 2 0 3  
3 0 3 0  
1 0 0 2  
0 3 3 3  
2 1 2  
0 1 2  
5 2  
2 4 3 1 3  
4 0 2 3 2  
2 0 3 4 3  
1 3 4 3 1  
3 0 3 3 4  
1 2 2  
2 3 3  

출력  
#1 3  
#2 11  
#3 26

#### 

#### 풀기 전 생각해보기😮

- 영역을 벗어난 곳을 계산해야 할 경우 어떻게 처리해야 할지 
- 이미 계산된 곳을 계산하지 않으려면 어떤 처리를 해야 할지

---

#### 풀이🛫

T = int(input())
for i in range(T):
    # 배열 생성
    N, M = map(int, input().split())
    arr = [list(map(int, input().split())) for i in range(N)]
    carr = [[True] * N for i in range(N)]
    answer = 0

    # 정사각형 값의 합 구하기
    for j in range(M):
        row, col, length = map(int, input().split())
        s = 0
        for c in range(length):
            for r in range(length):
                # 제한된 범위를 넘어가지 않도록 조건 설정
                if 0<=row+r<N and 0<=col+c < N:
                    if carr[row+r][col+c] == True:
                        s += arr[row+r][col+c]
                        carr[row+r][col+c] = False
        answer += s
    print("#"+str(i+1), answer)

#### 핵심 정리🎁

if 0<=row+r<N and 0<=col+c < N:
    if carr[row+r][col+c] == True:
        s += arr[row+r][col+c]
        carr[row+r][col+c] = False

- NxN 범위 밖으로 나갈 때는 계산이 되지 않도록 if 조건문을 추가해주었다.
- 한번 계산된 인덱스가 두번 계산되지 않도록 True/False로 checker array를 생성해서 표기해주었다.

#### 

#### 후기 😎

- try ~ catch 문으로 먼저 풀었었는데, 알고리즘에서도 출력되는 오류를 정확하게 확인하기 위해서는 try ~ catch문을 이용해 풀지 않는 것을 권장하는 편인 듯 하다.
- 영역을 벗어날 때 if절을 통해 풀어낼 수 있는 능력을 기르도록 하자
