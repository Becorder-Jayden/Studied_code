import java.util.Scanner;
import java.util.ArrayList;

public class Main {
    public static final int DIR_NUM = 4;
    public static final int MAX_N = 100;

    public static int n;
    public static int currX, currY; // 현재 위치 의미
    public static int[][] a = new int[MAX_N+1][MAX_N+1];

    // 방문하는 곳의 숫자를 담는 공간
    public static ArrayList<Integer> visitedNums = new ArrayList<>();

    // inRange, (1, n) 범위
    public static boolean inRange(int x, int y) {
        return 1<=x && x<=n && 1<=y && y<=n;   
    }
    
    // 추가적으로 진행해도 되는지 확인
    public static boolean canGo(int x, int y, int currNum) {
        return inRange(x, y) && a[x][y] > currNum; 
    }

    // 조건에 맞춰 움직이기
    public static boolean simulate() {
        // 상, 하, 좌, 우
        int[] dx = new int[]{-1, 1, 0, 0};
        int[] dy = new int[]{0, 0, -1, 1};

        for (int i=0; i<4; i++) {
            int nextX = currX + dx[i];
            int nextY = currY + dy[i];

            if (canGo(nextX, nextY, arr[currX][currY])) {
                currX = nextX;
                currY = nextY;
                return true;
            }
        }

        // 네 방향을 탐색해도 움직일 곳이 없을 때
        return false;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        n = sc.nextInt();
        currX = sc.nextInt();
        currY = sc.nextInt();

        for (int i=1; i<=n; i++) {
            for (int j=1; j<=n; j++) {
                arr[i][j] = sc.nextInt();         
            }
        }

        // 초기 위치에 적힌 값 넣기
        visitedNums.add(a[currX][currY]);
        
        while (true) {
            boolean greaterNumberExist = simulate();

            if (!greaterNumberExist) {
                break;
            }
            visitedNums.add(a[currX][currY]);
        }

        for (int i=0; i<visitedNums.size(); i++) {
            Sysetm.out.println(visitedNums.get(i)+" ");
        }
    }
}