// 누적 합을 이용하는 문제: 어느 경로를 지나갈 때 최대의 값을 가질 수 있도록 함
// 0번 인덱스에 기본 값을 설정하고, 값을 비교하면서 값을 채워나가는 형식

import java.util.Scanner;

public class Main {
    public static final int MAX_NUM = 1000;

    public static int n;
    public static int[][] num = new int[MAX_NUM][MAX_NUM];
    public static int[][] dp = new int[MAX_NUM][MAX_NUM];

    // init: *dp의 값에 최상단 행, 최좌측 열의 값을 입력 
    public static void init() {
        
        // 시작점의 경우 np[0][0] = num[0][0]으로 초기값 설정
        dp[0][0] = num[0][0];  

        // 최좌측 열의 초기값 설정
        for (int i=1; i<n; i++) {
            dp[i][0] = dp[i-1][0] + num[i][0];
        }

        // 최상단 행의 초기값 설정
        for (int i=1; i<n; i++) {
            dp[0][i] = dp[0][i-1] + num[0][i];
        }
    }
    
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // 값 입력
        n = sc.nextInt();
        for (int i=0; i<n; i++) {
            for (int j=0; j<n; j++) {
                num[i][j] = sc.nextInt();
            }
        }

        // 초기값 설정
        init();

        for (int i=1; i<n; i++) {
            for (int j=1; j<n; j++) {

                // 현재 위치 기준, 접근하는 dp 값 중에서 큰 값 + 현재 위치의 값 
                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + num[i][j];
            }
        }    

        System.out.println(dp[n-1][n-1]);
    }
}