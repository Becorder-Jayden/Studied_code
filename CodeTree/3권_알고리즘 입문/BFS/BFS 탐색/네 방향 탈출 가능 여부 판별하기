import java.util.Scanner; 
import java.util.Queue;  // import_1: Queue
import java.util.LinkedList;  // import_2: LinkedList

// *좌표 클래스 Pair 정의
class Pair {
    int x, y;  // 사용할 변수 정의

    // 변수 생성자 설정
    public Pair(int x, int y) {  
        this.x = x;
        this.y = y;
    }
}

public class Main {
    public static final int MAX_NUM = 100;
    public static int n, m;
    public static int[][] a = new int[MAX_NUM][MAX_NUM];

    // BFS에 필요한 변수
    public static boolean[][] visited = new boolean[MAX_NUM][MAX_NUM];
    public static Queue<Pair> q = new LinkedList<>();  // *큐의 형태 정의: Pair를 담는 Queue 구조를 LinkedList로 정의

    // 범위 안에 있는지 확인
    public static boolean inRange(int x, int y) {
        return 0<=x && x<n && 0<=y && y<m;
    }

    // 진행여부를 판단
    public static boolean canGo(int x, int y) {
        return inRange(x, y) && a[x][y] == 1 && !visited[x][y];  // 범위 내에 있고, a[x][y] == 1, 방문 여부가 false
    }

    // BFS 정의
    public static void BFS() {
        
        // Queue에 남는 것이 없을 때까지 반복: Queue가 남아있는 동안 while
        while (!q.isEmpty()) {  

            // 큐의 가장 앞에 있는 원소 빼기
            Pair curr = q.poll();  // *poll()을 통해서 뽑아내기
            
            // Pair로부터 x, y 분리
            int x = curr.x;
            int y = curr.y;

            // 상하좌우
            int[] dx = new int[]{0, 0, -1, 1};
            int[] dy = new int[]{-1, 1, 0, 0};

            // (x, y)로부터 네 방향 탐색
            for (int i=0; i<4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];

                // 이동여부를 판별하고, 가능하면 queue에 추가하고 방문 표시 진행
                if (canGo(nx, ny)) {
                    q.add(new Pair(nx, ny));  // *Pair 쌍으로 추가
                    visited[nx][ny] = true;
                }
            }
        }
    }


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // 입력
        n = sc.nextInt();
        m = sc.nextInt();

        for (int i=0; i<n; i++) {
            for (int j=0; j<m; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        // BFS를 이용해 최소 이동 횟수 구하기
        q.add(new Pair(0, 0));
        visited[0][0] = true; 

        BFS();

        int answer = visited[n-1][m-1] ? 1 : 0;  // *삼항연산자 이용해서 코드 줄이기: 결과가 true/false로 갈리기 때문에
        System.out.println(answer);
    }
}