import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Arrays;

class Pair {
    int x, y;
    
    public Pair(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class Main {
    public static int n;
    public static final int MAX_N = 100;

    public static int[][] g = new int[MAX_N][MAX_N];
    public static boolean[][] visited = new boolean[MAX_N][MAX_N];
    public static Queue<Pair> q = new LinkedList<>();

    // 1,2 / 4,5 / 7,8 / 10 11
    public static int[] dx = new int[]{1, 2, 2, 1, -1, -2, -2, -1};
    public static int[] dy = new int[]{-2, -1, 1, 2, 2, 1, -1, -2};
    
    public static boolean inRange(int x, int y) {
        return 0<=x && x<n && 0<=y && y<n;
    }

    public static boolean canGo(int x, int y) {
        return inRange(x, y) && !visited[x][y] && g[x][y] == 0;
    }

    public static void push(int x, int y, int s) {
        q.add(new Pair(x, y));  // 큐에 좌표 입력 
        visited[x][y] = true;  // 방문 처리
        g[x][y] = s;  // 이동 횟수 입력
    }

    public static void findMin() {

        while (!q.isEmpty()) {  // whild 조건: *q가 비어있지 않는 동안
            Pair curr = q.poll();
            int x = curr.x;
            int y = curr.y; 
        

            for (int i=0; i<8; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];

                if (canGo(nx, ny)) {
                    push(nx, ny, g[x][y]+1);
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();

        int r1 = sc.nextInt(), c1 = sc.nextInt();
        int r2 = sc.nextInt(), c2 = sc.nextInt();

        // 주요 로직 수행
        push(r1-1, c1-1, 0);  // 시작 좌표를 큐 안에 입력
        findMin();   // 큐에 입력된 시작점을 기준으로 bfs 진행

        // 도착 지점에 방문 여부 확인해서 정답을 도출
        int ans = visited[r2-1][c2-1] ? g[r2-1][c2-1] : -1;
        System.out.println(ans);  
    }
}