// 우선순위 큐: 우선순위가 가장 높은 데이터에만 관심
//  add(x): x 추가
//  size(): 데이터 수 반환
//  isEmpty(): 비어있는 지 확인
//  peek(): 최솟값 데이터 반환
//  poll(): 최솟값 데이터를 반환하고 데이터를 삭제

import java.util.Scanner;
import java.util.PriorityQueue;  // 우선순위큐 모듈

public class Main {
    public final static int MAX_N = 10000;

    public static int n;

    public static PriorityQueue<Integer> pq = new PriorityQueue<>();

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();

        for (int i=0; i<n; i++) {
            String command = sc.next();
            
            if (command.equals("push")) {
                int x = sc.nextInt();
                pq.add(x);
            } 
            else if (command.equals("pop")) {
                System.out.println(pq.poll());
            }
            else if (command.equals("size")) {
                System.out.println(pq.size());
            }
            else if (command.equals("empty")) {
                if (pq.isEmpty()) {
                    System.out.println(1);
                } else {
                    System.out.println(0);
                }
            }
            else if (command.equals("top")) {
                System.out.println(pq.poll());  // *peek: 최솟값, poll: 최댓값
            }
        } 
    }
}