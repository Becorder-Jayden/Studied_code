import java.util.Scanner; 
import java.util.TreeSet;

// (x, y) 쌍으로 저장할 수 있는 Pair 클래스 생성
// x, y를 기준으로 오름차순 정렬할 수 있도록 Comparable 메소드 재정의
class Pair implements Comparable<Pair> {
    int x, y;

    public Pair(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public int compareTo(Pair p) {
        if (this.x != p.x) {  // x 좌표 기준 정렬
            return this.x - p.x;
        } else {  // y 좌표 기준 정렬 
            return this.y - p.y;
        }
    }
}


public class Main {
    public final static int MAX_N = 100000;
    public static int n, m;

    public static TreeSet<Pair> ts = new TreeSet<>();
    public static Pair[] pairs = new Pair[MAX_N];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();

        for (int i=0; i<n; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();

            pairs[i] = new Pair(x, y);  // 입력값 저장
        }

        for (int i=0; i<n; i++) {
            ts.add(pairs[i]);  // TreeSet 구조에 입력(x, y 오름차순 정렬) 
        }

        while (m-- > 0) {
            int k = sc.nextInt();

            // 주어지는 x, y는 1보다 큰 수 
            //  → y값이 -1인 기준을 세우면 x가 동일할 때, y가 기준보다 큰 위치를 higher를 통해 찾을 수 있음
            if (ts.higher(new Pair(k, -1)) == null) {
                System.out.println("-1 -1"); 
            } else {
                Pair p = ts.higher(new Pair(k, -1));
                System.out.println(p.x+" "+p.y); 
                ts.remove(p); 
            }
        }
    }
}