import java.util.Scanner;

// 다익스트라 알고리즘을 구현하는 방식은 2가지: O(|E|log|V|), O(|V|^2)
//  O(|E|log|V|): 우선순위 큐를 이용
//  O(|V|^2): 인접 리스트 형태를 이용
//  cf. |V|가 작다면 인접 리스트 형태를 사용해도 좋다

//==다익스트라 알고리즘 작동 과정==//
//  1. 출발 노드를 설정
//  2. 출발 노드를 기준으로 각 노드의 최소비용 저장
//  3. 방문하지 않은 노드들 중 가장 비용이 적은 노드 선택
//  4. 해당 노드를 거쳐 특정한 노드로 가는 경우를 고려해서 최소 비용을 갱신
//  5. 3~4 과정 반복

public class Main {
    public static final int MAX_N = 100;

    public static int n, m; 
    public static int[][] graph = new int[MAX_N+1][MAX_N+1];
    public static boolean[] visited = new boolean[MAX_N+1];

    public static int[] dist = new int[MAX_N+1];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt(); 

        //==인접행렬 표현==//
        while (m-- > 0) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            int z = sc.nextInt();
            graph[x][y] = z;  // x → y 이동할 때의 가중치 z
        }

        //==dist값 설정==//
        // 모든 노드에 대해 초기값을 아주 큰 값으로 설정
        // cf. INT_MAX로 설정하면 덧셈 과정에서 overflow 에러가 날 수 있음: 적당히 큰 숫자로 적어줘야 한다, '(int)1e9'를 사용하도록 하자 = 1000000000  
        for (int i=1; i<=n; i++) {
            dist[i] = (int)1e9;
        }
        
        // *시작 위치: dist 값을 0으로 설정
        dist[1] = 0;


        //==O(|V|^2) 다익스트라 코드==//
        for (int i=1; i<=n; i++) {
            
            // 1. V개 정점 중에서, 아직 방문하지 않은 정점 중 dist값이 가장 작은 정점 찾기
            int minIndex = -1; 
            for (int j=1; j<=n; j++) {
                
                // 이미 방문한 경우 continue
                if (visited[j]) {  
                    continue;
                }
                
                //=가장 비용(dist)이 적은 노드 선택=// 
                // minIndex == -1: 정점이 선택되지 않은 상태  
                // dist[minIndex] > dist[j]: j까지의 최단 경로가, 지금까지 찾은 최단 경로보다 짧음
                if (minIndex == -1 || (dist[minIndex] > dist[j])) {
                    minIndex = j;
                }
            }

            // 2. 최솟값에 해당하는 정점에 방문 표시 진행
            visited[minIndex] = true;

            // 3. 최솟값에 해당하는 정점과 연결된 간선들을 확인, 시작점으로부터의 최단거리 값 갱신
            for (int j=1; j<=n; j++) {
                if (graph[minIndex][j] == 0) {  // 간선이 존재하지 않는 경우 continue
                    continue;
                }
                dist[j] = Math.min(dist[j], dist[minIndex] + graph[minIndex][j]);
            }
        }

        // 시삭점(1번)으로부터 각 지점까지의 최단거리 값을 출력
        for (int i=2; i<=n; i++) {
            if (dist[i] == (int)1e9) {
                System.out.println(-1);
            } else {
                System.out.println(dist[i]); 
            }
        }
    }
}