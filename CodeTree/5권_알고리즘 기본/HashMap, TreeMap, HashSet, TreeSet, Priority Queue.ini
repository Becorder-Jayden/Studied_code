# 자료구조 설명

### HashMap 
- (key, value) 쌍으로 입력
- 삽입, 삭제, 탐색등 모든 함수의 시간복잡도 O(1)
- TreeMap보다 속도가 빠르지만, 순서에 관심이 없음
- import java.util.HashMap;
- 데이터 입력 : put(k, v)
- 데이터 제거 : remove(k)
- k 값 조회, 불가능할 때 d 반환 : getOrDefault(k, d)
- k 값 포함 여부 : constrainsKey(k)
- k 값 조회 : get(k)


### TreeMap
- 균형잡힌이진트리 구조
- (key, value)쌍으로 입력
- key를 기준으로 순서대로 조회 가능
- import java.util.TreeMap;

### HashSet
- 해싱을 기반으로 데이터를 관리 자료구조 O(1)
- TreeSet보다 속도가 빠르지만, 순서에는 전혀 관심이 없음
- import java.util.HashSet;
- 데이터 입력 : add(x)
- 데이터 제거 : remove(x)
- 데이터 포함 여부 : contains(x)

### TreeSet
- 균형잡힌이진트리 구조
- 시간복잡도: O(logN)
- import java.util.TreeSet; 


### PriorityQueue
- 최소힙, 최대힙 구현
- 기본은 최소힙이며, 추가되는 요소를 음수로 입력해서 최대힙으로 구현이 가능
- 가장 높은 우선순위의 값만 영향을 주고 받음
- import java.util.PriorityQueue;