import java.util.Scanner;

public class Main {
    public static final int MAX_N = 400;

    public static int n, k;
    public static int ans = 0;
    public static int[][] board = new int[MAX_N+1][MAX_N+1];
    public static int[][] rotatedBoard = new int[MAX_N*2+1][MAX_N*2+1];
    public static int[][] prefixSum = new int[MAX_N*2+1][MAX_N*2+1];


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); 
        n = sc.nextInt();
        k = sc.nextInt();

        // 주어지는 값 입력
        for (int i=1; i<=n; i++){
            for (int j=1; j<=n; j++) {
                board[i][j] = sc.nextInt(); 
            }
        }

        // 2차원 배열을 45도 회전: 정사각형 부분합을 구하는 문제로 변경
        for (int i=2; i<=2*n; i++) {
            for (int j=1; j<=2*n; j++) {
                if (1 <= i-j && i-j <= n) { 
                    int x = i-1;
                    int y = n-i + 2*j;
                    rotatedBoard[x][y] = board[j][i-j];
                }
            }
        }

        // 2차원 배열의 누적합 구하기
        for (int i=1; i<= 2*n; i++) {
            for (int j=1; j<=2*n; j++) {
                prefixSum[i][j] = prefixSum[i-1][j]+prefixSum[i][j-1] - prefixSum[i-1][j-1] + rotatedBoard[i][j];
            }
        }

        // 한변의 길이가 k2인 정사각형 부분 중에서 부분합이 최대인 사각형을 찾느다
        int k2 = Math.min(2*k + 1, 2*n);
        for (int i=k2; i<=2*n; i++) {
            for (int j=k2; j<=2*n; j++) {
                ans = Math.max(ans, prefixSum[i][j] - prefixSum[i-k2][j] - prefixSum[i][j-k2] + prefixSum[i-k2][j-k2]);
            }
        }
        System.out.println(ans);
    }
}