import java.util.Scanner;

public class Main {
    public static final int MAX_NUM = 1000; 
    public static final int MAX_C = 3; 
    
    public static int n, m, k; 
    public static int[][] grid = new int[MAX_NUM+1][MAX_NUM+1];
    public static int[][][] prefixSum = new int[MAX_C+1][MAX_NUM+1][MAX_NUM+1];

    public static int getSum(int c, int x1, int y1, int x2, int y2) {
        return prefixSum[c][x2][y2] - prefixSum[c][x1-1][y2] - prefixSum[c][x2][y1-1] + prefixSum[c][x1-1][y1-1];
    }


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();  // 문자의 길이 
        k = sc.nextInt();

        for (int i=1; i<=n; i++) {
            
            //==입력 문자열을 아래와 같이 문자로 분리할 수 있다==//
            String input = sc.next();  
            
            for (int j=1; j<=m; j++) {
                char c = input.charAt(j-1); 

                // *편의를 위해 a=1, b=2, c=3으로 바꿔서 저장
                if (c == 'a') {
                    grid[i][j] = 1;
                } else if (c == 'b') {
                    grid[i][j] = 2;
                } else {
                    grid[i][j] = 3;
                }
            }
        }
 
        // 3차원 누적합 만들기: prefixSum[c][i][j]: c가 1, 2, 3인 각각의 누적합 그리드를 생성하고 기록
        for (int c=1; c<=3; c++) {
            for (int i=1; i<=n; i++) {
                for (int j=1; j<=m; j++) {
                    int additionalVal = 0;

                    if (grid[i][j] == c) {
                        additionalVal = 1; 
                    }
                    
                    // (i, j)에 c가 있는 경우에만 값을 증가
                    prefixSum[c][i][j] = prefixSum[c][i-1][j] + prefixSum[c][i][j-1] - prefixSum[c][i-1][j-1] + additionalVal;
                }
            }
        }

        while(k-- > 0) {
            int x1 = sc.nextInt();
            int y1 = sc.nextInt();
            int x2 = sc.nextInt();
            int y2 = sc.nextInt();

            System.out.print(getSum(1, x1, y1, x2, y2) + " ");
            System.out.print(getSum(2, x1, y1, x2, y2) + " ");
            System.out.println(getSum(3, x1, y1, x2, y2));
        }
    }
}