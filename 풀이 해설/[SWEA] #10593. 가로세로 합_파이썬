#### 문제 (Solving Club)

가로 세로 합

N x N 배열에서 한 칸을 선택했을 때 그 칸을 포함하는 가로 행과 세로 열에 포함된 값들의 총합이 최대가 되는 경우를 찾고 싶다.

그림1과 2는 N = 4인 배열의 예이다.  그림 1은 (3행, 1열)의 위치를 포함하는 행과 열의 합 **15** 가 최대가 되고, 그림 2는 (2행, 2열)을 포함하는 **16** 이 최대가 된다.

![](https://blog.kakaocdn.net/dn/cVhDy3/btrIH6P2ib3/SvkePPRtK8ApLemhEKjCm1/img.png)

                 <그림1>                                       <그림2>

[입력]

첫 줄에 테스트케이스 수가 주어진다.

다음으로 배열의 크기 N(1<= N <= 30)이 주어진다.

다음 N개의 줄에 공백으로 구분된 N개의 양의 정수 값이 주어진다.

[출력]

'#'과 케이스 번호를 출력하고 총합이 최대가 되는 값을 출력한다.

입력3  
4  
1 2 0 1  
2 1 0 1  
1 2 3 2  
3 2 2 3  
4  
3 2 3 0  
0 2 2 0  
2 3 2 2  
2 1 2 1  
5  
2 4 3 1 3  
4 0 2 3 2  
2 0 3 4 3  
1 3 4 3 1  
3 0 3 3 4

출력

#1 15  
#2 16  
#3 26

#### 풀기 전 생각해보기😮

- 가로열과 세로열의 합 탐색하기
- 중복되는 값 제거

---

#### 풀이🛫

# 가로세로 합

T = int(input())

for t in range(T):
    N = int(input())
    arr = [list(map(int, input().split())) for t in range(N)]
    answer = 0 

    row_list, col_list = [], []
    # 가로열(행)의 합 리스트 구하기
    for col in range(N):
        row_sum = 0
        for row in range(N):
            row_sum += arr[col][row]
        row_list.append(row_sum)
    # 세로열(열)의 합 리스트 구하기
    for row in range(N):
        col_sum = 0
        for col in range(N):
            col_sum += arr[col][row]
        col_list.append(col_sum)
    
    # 합계 리스트의 인덱스 번호를 통해 arr[col][row]의 정보 업데이트
    for col in range(N):
        for row in range(N):
            arr[col][row] = row_list[col] + col_list[row] - arr[col][row]
    
            # 최대값 구하기
            if answer < arr[col][row]:
                answer = arr[col][row]
    print("#"+str(t+1), answer)

#### 핵심 정리🎁

- 가로열 탐색 : col for문에서 row열 조회
- 세로열 탐색 : row for문에서 col열 조회
- 가로, 세로열 합계를 탐색하는  과정에서 해당 위치의 값이 중복되어 합계되기 때문에 한번은 제거해주어야 한다.

#### 후기 😎

- 이상적인 코드 풀이인지는 잘 모르겠다. 왠지 더 멋진 풀이 코드가 있을 것 같아서 solving club에서 풀이하신 분들께 정답 코드를 구해봐야 할 듯 하다.
